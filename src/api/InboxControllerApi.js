/**
 * MailSlurp API Documentation
 * [MailSlurp](https://www.mailslurp.com) is an end-to-end email testing service. It has a [web-app](https://www.mailslurp.com/dashboard) for managing your account and a [REST API](https://api.mailslurp.com) for sending and receiving emails from randomly generated email addresses.  ## Why? MailSlurp was built to test the integration of email services within an app. If your application relies on the sending or receiving of emails, then MailSlurp will let you test that functionality. This is a more common need than you might think: if your app has a sign up process that requires email verification, how do you currently test that?  ## Getting started - [API Docs](https://www.mailslurp.com/documentation) - [Code Examples](https://www.mailslurp.com/documentation/examples) - [Swagger Definition](https://api.mailslurp.com/v2/api-docs)  Every API request requires a valid API Key appended as a query parameter. [To obtain an API Key visit your account dashboard](https://www.mailslurp.com/dashboard).    The general flow is as follows:  - Create a new inbox during a test. The email address will be returned in the response.  - Send an email to that address or trigger an action in your test that does so. - Fetch the email for your new inbox and check if its content is what you expected, or use the content in another action.  ## SDK - There is an official [Javascript SDK](https://www.npmjs.com/package/mailslurp-client) available on npm. - You can also use the [swagger JSON definition](https://api.mailslurp.com/v2/api-docs) and [swagger-codegen](https://github.com/swagger-api/swagger-codegen) to generate a swagger client in a language of your choice.  ## Legal The Mailslurp API code is owned by [PettmanUG](http://pettmanug.site) and uses a proprietary [software licence](http://www.binpress.com/license/view/l/c8376a01eca7465027a978d3fde5a1e2). The SDKs are free to use in any project and have an ISC licence.  ## Bugs, features, support To report bugs or request features please see the [contact page](https://www.mailslurp.com/contact). For help see [support](https://www.mailslurp.com/support).
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';
import ResponseInboxDto from '../model/ResponseInboxDto';
import ResponseListEmailDto from '../model/ResponseListEmailDto';
import ResponseListInboxDto from '../model/ResponseListInboxDto';
import SendEmailDto from '../model/SendEmailDto';

/**
* InboxController service.
* @module api/InboxControllerApi
* @version 0.0.1
*/
export default class InboxControllerApi {

    /**
    * Constructs a new InboxControllerApi. 
    * @alias module:api/InboxControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an inbox
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseInboxDto} and HTTP response
     */
    createRandomInboxUsingPOSTWithHttpInfo(apiKey) {
      let postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createRandomInboxUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
        'apiKey': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseInboxDto;

      return this.apiClient.callApi(
        '/inboxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an inbox
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseInboxDto}
     */
    createRandomInboxUsingPOST(apiKey) {
      return this.createRandomInboxUsingPOSTWithHttpInfo(apiKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an inbox
     * Delete an inbox and all the emails associated with it.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    deleteInboxUsingDELETEWithHttpInfo(apiKey, uuid) {
      let postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteInboxUsingDELETE");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteInboxUsingDELETE");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'apiKey': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/inboxes/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an inbox
     * Delete an inbox and all the emails associated with it.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    deleteInboxUsingDELETE(apiKey, uuid) {
      return this.deleteInboxUsingDELETEWithHttpInfo(apiKey, uuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch emails for a given inbox
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 100 seconds, an error will be returned.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minCount Wait a maximum of 100 seconds for atleast this many emails in an inbox before returning a result.
     * @param {Number} opts.maxWait Maximum seconds API should spend retrying your inbox until the minCount is satisfied
     * @param {Date} opts.since Filter for emails received on or after this ISO8601 LocalDateTime.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseListEmailDto} and HTTP response
     */
    getEmailsForInboxUsingGETWithHttpInfo(apiKey, uuid, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getEmailsForInboxUsingGET");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getEmailsForInboxUsingGET");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'apiKey': apiKey,
        'minCount': opts['minCount'],
        'maxWait': opts['maxWait'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseListEmailDto;

      return this.apiClient.callApi(
        '/inboxes/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch emails for a given inbox
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 100 seconds, an error will be returned.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minCount Wait a maximum of 100 seconds for atleast this many emails in an inbox before returning a result.
     * @param {Number} opts.maxWait Maximum seconds API should spend retrying your inbox until the minCount is satisfied
     * @param {Date} opts.since Filter for emails received on or after this ISO8601 LocalDateTime.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseListEmailDto}
     */
    getEmailsForInboxUsingGET(apiKey, uuid, opts) {
      return this.getEmailsForInboxUsingGETWithHttpInfo(apiKey, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List your inboxes
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseListInboxDto} and HTTP response
     */
    getListOfInboxesUsingGETWithHttpInfo(apiKey) {
      let postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getListOfInboxesUsingGET");
      }


      let pathParams = {
      };
      let queryParams = {
        'apiKey': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ResponseListInboxDto;

      return this.apiClient.callApi(
        '/inboxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List your inboxes
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseListInboxDto}
     */
    getListOfInboxesUsingGET(apiKey) {
      return this.getListOfInboxesUsingGETWithHttpInfo(apiKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send an email
     * Send an email from the given inbox&#39;s email address. Useful if you need to test a user contacting you, for instance.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @param {module:model/SendEmailDto} sendEmailDto The email to send.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    sendEmailFromUserUsingPOSTWithHttpInfo(apiKey, uuid, sendEmailDto) {
      let postBody = sendEmailDto;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sendEmailFromUserUsingPOST");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling sendEmailFromUserUsingPOST");
      }

      // verify the required parameter 'sendEmailDto' is set
      if (sendEmailDto === undefined || sendEmailDto === null) {
        throw new Error("Missing the required parameter 'sendEmailDto' when calling sendEmailFromUserUsingPOST");
      }


      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'apiKey': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Response;

      return this.apiClient.callApi(
        '/inboxes/{uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send an email
     * Send an email from the given inbox&#39;s email address. Useful if you need to test a user contacting you, for instance.
     * @param {String} apiKey Your API Key. Sign up and find it in your dashboard.
     * @param {String} uuid The inbox&#39;s id.
     * @param {module:model/SendEmailDto} sendEmailDto The email to send.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    sendEmailFromUserUsingPOST(apiKey, uuid, sendEmailDto) {
      return this.sendEmailFromUserUsingPOSTWithHttpInfo(apiKey, uuid, sendEmailDto)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
